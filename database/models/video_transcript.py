from database.connection import db
from database.models.video import Video
from datetime import datetime

class VideoTranscript(db.Model):
    """
    SQLAlchemy model for storing transcripts of YouTube videos.
    """

    __tablename__ = 'video_transcripts'

    # Primary key for the table
    id = db.Column(db.Integer, primary_key=True)

    # Foreign key reference to the video table
    video_id = db.Column(db.String(255), db.ForeignKey('videos.video_id'), nullable=False)

    # Language of the transcript (default is English)
    language = db.Column(db.String(50), default='en')

    # Full text of the video transcript
    full_transcript = db.Column(db.Text, nullable=False)

    # Boolean flag to indicate if the transcript was automatically generated by YouTube
    is_generated = db.Column(db.Boolean, default=False)

    # Timestamp indicating when the transcript was retrieved
    retrieved_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Establishing a relationship with the Video model.
    # This allows for easy access to the video associated with each transcript.
    # The backref creates a virtual column in the Video model to access related transcripts.
    video = db.relationship('Video', backref=db.backref('transcripts', lazy=True))

    def __repr__(self):
        """
        String representation of the VideoTranscript instance, useful for debugging.
        """
        return f'<VideoTranscript {self.id} for Video {self.video_id}, Language: {self.language}>'
